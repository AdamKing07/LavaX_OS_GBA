后面不判断条件的pop_val()，产生的
ldr	r10,[r6,#-4]!
多数条件下是多余的。因为pop_val表示一个语句体的结束，而下一语句一般都会往栈里送数，所以此语句和下一语句的
str	r10,[r6],#4
可以同时省略

例外发生在：
后面是返回语句sub_bp


什么情况产生TK_pop？
eval()产生TK_pop。
谁调用eval()？
for () 里面的语句；
while () 里面的语句（两种while）
if () 里面的语句
一般以;结束的语句

不用TK_pop的情况：
调用内部或外部void函数
非void函数 return 后面的返回值

一般语句的第一条指令都要压栈。因为这时栈是空的，不可能pop。
也有不压栈的语句：
无参数的函数出现在语句首